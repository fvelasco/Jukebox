<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleMvvmToolkit</name>
    </assembly>
    <members>
        <member name="T:SimpleMvvmToolkit.ViewModelBase`1">
            <summary>
            Base class for non-detail view-models
            </summary>
            <typeparam name="TViewModel">Class inheriting from ViewModelBase</typeparam>
        </member>
        <member name="T:SimpleMvvmToolkit.ViewModelBase">
            <summary>
            Base class for view models
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ViewModelBase.IsInDesignMode">
            <summary>
            Allows you to provide data at design-time (Blendability)
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Allows you to specify a lambda for notify property changed
            </summary>
            <typeparam name="TResult">Property type</typeparam>
            <param name="property">Property for notification</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.Notify(System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs},SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Fire a notification event, which is transparently marshalled
            to the UI thread.
            </summary>
            <param name="handler">Notification event</param>
            <param name="e">Notification message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.Notify``1(System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0}},SimpleMvvmToolkit.NotificationEventArgs{``0})">
            <summary>
            Fire a notification event, which is transparently marshalled
            to the UI thread.
            </summary>
            <typeparam name="TOutgoing">Outgoing data type</typeparam>
            <param name="handler">Notification event</param>
            <param name="e">Notification message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.Notify``2(System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0,``1}},SimpleMvvmToolkit.NotificationEventArgs{``0,``1})">
            <summary>
            Fire a notification event, which is transparently marshalled
            to the UI thread.
            </summary>
            <typeparam name="TOutgoing">Outgoing data type</typeparam>
            <typeparam name="TIncoming">Incoming data type</typeparam>
            <param name="handler">Notification event</param>
            <param name="e">Notification message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.RegisterToReceiveMessages(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs})">
            <summary>
            Register callback using a string token, which is usually defined as a constant.
            </summary>
            <para>
            There is no need to unregister because receivers are allowed to be garbage collected.
            </para>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.RegisterToReceiveMessages``1(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0}})">
            <summary>
            Register callback using string token and notification with TOutgoing data.
            </summary>
            <para>
            There is no need to unregister because receivers are allowed to be garbage collected.
            </para>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.RegisterToReceiveMessages``2(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0,``1}})">
            <summary>
            Register callback using string token and notification with TOutgoing data
            and the subscriber's callback with TIncoming data.
            </summary>
            <para>
            There is no need to unregister because receivers are allowed to be garbage collected.
            </para>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.UnregisterToReceiveMessages(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs})">
            <summary>
            Unregister callback using a string token, which is usually defined as a constant.
            </summary>
            <para>
            This is optional because registered receivers are allowed to be garbage collected.
            </para>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.UnregisterToReceiveMessages``1(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0}})">
            <summary>
            Unregister callback using string token and notification with TOutgoing data.
            </summary>
            <para>
            This is optional because registered receivers are allowed to be garbage collected.
            </para>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.UnregisterToReceiveMessages``2(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0,``1}})">
            <summary>
            Unregister callback using string token and notification with TOutgoing data
            and the subscriber's callback with TIncoming data.
            </summary>
            <para>
            This is optional because registered receivers are allowed to be garbage collected.
            </para>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.SendMessage(System.String,SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.SendMessage``1(System.String,SimpleMvvmToolkit.NotificationEventArgs{``0})">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.SendMessage``2(System.String,SimpleMvvmToolkit.NotificationEventArgs{``0,``1})">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.BeginSendMessage(System.String,SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.BeginSendMessage``1(System.String,SimpleMvvmToolkit.NotificationEventArgs{``0})">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelBase`1.BeginSendMessage``2(System.String,SimpleMvvmToolkit.NotificationEventArgs{``0,``1})">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="E:SimpleMvvmToolkit.ViewModelBase`1.PropertyChanged">
            <summary>
            PropertyChanged event accessible to dervied classes
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.ServiceAgentExportAttribute">
            <summary>
            Apply this attribute to a service agent class.
            Specify the service agent interface type as the contract type,
            as well as the agent type. For example:
            [ServiceAgentExport(typeof(ICustomerServiceAgent), AgentType = AgentType.Mock)]
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.ViewModelDetailBase`2">
            <summary>
            Base class for detail view-models. Also provides support for
            IEditableDataObject.
            </summary>
            <typeparam name="TViewModel">Class inheriting from ViewModelBase</typeparam>
            <typeparam name="TModel">Detail entity type</typeparam>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.AssociateProperties``2(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Propagates changes from model property to view-model property.
            </summary>
            <typeparam name="TModelResult">Model property type</typeparam>
            <typeparam name="TViewModelResult">View-model property type</typeparam>
            <param name="modelProperty">Model property</param>
            <param name="viewModelProperty">View-model property</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.UnAssociateProperties``2(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Unsubscribe from changes to  model property.
            </summary>
            <typeparam name="TModelResult">Model property type</typeparam>
            <typeparam name="TViewModelResult">View-model property type</typeparam>
            <param name="modelProperty">Model property</param>
            <param name="viewModelProperty">View-model property</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.BeginEdit">
            <summary>
            Caches a deep clone of the entity
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.CancelEdit">
            <summary>
            Restores original
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.EndEdit">
            <summary>
            Copies property values from clone to original.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.OnBeginEdit">
            <summary>
            Model has executed BeginEdit.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.OnEndEdit">
            <summary>
            Model has executed EndEdit.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ViewModelDetailBase`2.OnCancelEdit">
            <summary>
            Model has executed CancelEdit
            </summary>
        </member>
        <member name="P:SimpleMvvmToolkit.ViewModelDetailBase`2.Model">
            <summary>
            Detail entity
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.TestExtensions.SilverlightTestExtensions">
            <summary>
            Extensions for SilverlightTest class.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.TestExtensions.SilverlightTestExtensions.EnqueueConditional(Microsoft.Silverlight.Testing.SilverlightTest,System.Func{System.Boolean},System.Int32)">
            <summary>
            Requires a bool returning delegate to be passed in. Instructs the test task
            queue to wait until the conditional call returns True to continue executing
            other test tasks and/or ending the test method.
            </summary>
            <param name="test">Silverlight test class</param>
            <param name="condition">Conditional method or delegate. Test will halt until this condition returns True</param>
            <param name="seconds">Number of seconds before timeout expires. Pass Timeout.Infinite for no timeout.</param>
        </member>
        <member name="T:SimpleMvvmToolkit.MessageBusProxy">
            <summary>
            Handles communication with the MessageBus.
            ViewModelBase stores this internally.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Register(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs})">
            <summary>
            Register callback using a string token, which is usually defined as a constant
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Register``1(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0}})">
            <summary>
            Register callback using string token and notification with TOutgoing data
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Register``2(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0,``1}})">
            <summary>
            Register callback using string token and notification with TOutgoing data
            and the subscriber's callback with TIncoming data.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to invoke when notified</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Unregister(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs})">
            <summary>
            Remove callback from the invocation list.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to remove from notifications</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Unregister``1(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0}})">
            <summary>
            Remove callback from the invocation list.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to remove from notifications</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.Unregister``2(System.String,System.EventHandler{SimpleMvvmToolkit.NotificationEventArgs{``0,``1}})">
            <summary>
            Remove callback from the invocation list.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="callback">Method to remove from notifications</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBusProxy.SimpleMvvmToolkit#INotifyable#Notify(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Notify registered callbacks.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="T:SimpleMvvmToolkit.DelegateCommand">
            <summary>
            Provide a command that can bind to ButtonBase.Command 
            without accepting command parameters for Execute and CanExecute.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.MessageBus">
            <summary>
            Facilitates communication among view-models.
            To prevent memory leaks weak references are used.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.Register(System.String,SimpleMvvmToolkit.INotifyable)">
            <summary>
            Register subscriber using a string token, which is usually defined as a constant.
            Subscriber performs internal notifications.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="subscriber">Subscriber requesting notifications</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.Unregister(System.String,SimpleMvvmToolkit.INotifyable)">
            <summary>
            Remove subscriber from the invocation list
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="subscriber">Subscriber to remove from notifications</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.Notify(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.Notify``1(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs{``0})">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.Notify``2(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs{``0,``1})">
            <summary>
            Notify registered subscribers.
            Call is transparently marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.BeginNotify(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs)">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.BeginNotify``1(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs{``0})">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="M:SimpleMvvmToolkit.MessageBus.BeginNotify``2(System.String,System.Object,SimpleMvvmToolkit.NotificationEventArgs{``0,``1})">
            <summary>
            Notify registered subscribers asynchronously.
            Call is not marshalled to UI thread.
            </summary>
            <typeparam name="TOutgoing">Type used by notifier to send data</typeparam>
            <typeparam name="TIncoming">Type sent by subscriber to send data back to notifier</typeparam>
            <param name="token">String identifying a message token</param>
            <param name="sender">Sender of notification</param>
            <param name="e">Event args carrying message</param>
        </member>
        <member name="P:SimpleMvvmToolkit.MessageBus.Default">
            <summary>
            Singleton of MessageBus.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.ModelExtensions.Extensions">
            <summary>
            Extension methods for model entities.
            </summary>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelExtensions.Extensions.Clone``1(``0)">
            <summary>
            Performs a deep copy using DatacontractSerializer.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="obj">Entity object</param>
            <returns>Cloned entity</returns>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelExtensions.Extensions.CopyValuesTo``1(``0,``0)">
            <summary>
            Performs a shallow copy of all properties
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="source">Source entity object</param>
            <param name="dest">Destination entity object</param>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelExtensions.Extensions.GetEnumItems``1">
            <summary>
            Convert an enum into a list of value / string pairs for 
            showing in list controls
            </summary>
            <typeparam name="TEnum">Enum type</typeparam>
            <returns>Sequence of enum / name pairs</returns>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelExtensions.Extensions.GetEnumItems``2">
            <summary>
            Convert an enum into a list of value / string pairs for 
            showing in list controls
            </summary>
            <typeparam name="TEnum">Enum type</typeparam>
            <typeparam name="TValue">Enum base type</typeparam>
            <returns>Sequence of value / name pairs</returns>
        </member>
        <member name="T:SimpleMvvmToolkit.NotificationEventArgs">
            <summary>
            Notification with or without a string message
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.NotificationEventArgs`1">
            <summary>
            Notification with outgoing data
            </summary>
            <typeparam name="TOutgoing">Outgoing data type</typeparam>
        </member>
        <member name="T:SimpleMvvmToolkit.NotificationEventArgs`2">
            <summary>
            Notification with outgoing and incoming data
            </summary>
            <typeparam name="TOutgoing">Outgoing data type</typeparam>
            <typeparam name="TIncoming">Incoming data type</typeparam>
        </member>
        <member name="T:SimpleMvvmToolkit.ModelBase`1">
            <summary>
            Provides support to entities for two-way data binding by
            implementing INotifyPropertyChanged with a lambda expression.
            </summary>
            <typeparam name="TModel">Class inheriting from ModelBase</typeparam>
        </member>
        <member name="M:SimpleMvvmToolkit.ModelBase`1.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Allows you to specify a lambda for notify property changed
            </summary>
            <typeparam name="TResult">Property type</typeparam>
            <param name="property">Property for notification</param>
        </member>
        <member name="E:SimpleMvvmToolkit.ModelBase`1.PropertyChanged">
            <summary>
            PropertyChanged event accessible to dervied classes
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.DelegateCommand`1">
            <summary>
            Provide a command that can bind to ButtonBase.Command 
            and accept command parameters for Execute and CanExecute.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SimpleMvvmToolkit.IServiceAgentMetadata">
            <summary>
            Metadata indicating the kind of service agent used.
            </summary>
        </member>
        <member name="T:SimpleMvvmToolkit.AgentType">
            <summary>
            Service agent type.
            </summary>
        </member>
    </members>
</doc>
